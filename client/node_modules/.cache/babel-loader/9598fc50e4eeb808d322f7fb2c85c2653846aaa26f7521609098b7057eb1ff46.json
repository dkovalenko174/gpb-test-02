{"ast":null,"code":"import axios from \"axios\";\n\n// Действия для загрузки списка услуг\nexport const FETCH_SERVICES_REQUEST = \"FETCH_SERVICES_REQUEST\";\nexport const FETCH_SERVICES_SUCCESS = \"FETCH_SERVICES_SUCCESS\";\nexport const FETCH_SERVICES_FAILURE = \"FETCH_SERVICES_FAILURE\";\n\n// Действие для загрузки деталей услуг\nexport const FETCH_SERVICE_DETAILS_REQUEST = \"FETCH_SERVICE_DETAILS_REQUEST\";\nexport const FETCH_SERVICE_DETAILS_SUCCESS = \"FETCH_SERVICE_DETAILS_SUCCESS\";\nexport const FETCH_SERVICE_DETAILS_FAILURE = \"FETCH_SERVICE_DETAILS_FAILURE\";\n\n// Action Creator для загрузки списка услуг\nexport const fetchServicesRequest = signal => ({\n  type: FETCH_SERVICES_REQUEST,\n  payload: signal\n});\nexport const fetchServicesSuccess = services => ({\n  type: FETCH_SERVICES_SUCCESS,\n  payload: services\n});\nexport const fetchServicesFailure = error => ({\n  type: FETCH_SERVICES_FAILURE,\n  payload: error\n});\n\n// Action Creator для загрузки деталей услуги\nexport const fetchServiceDetailsRequest = serviceId => ({\n  type: FETCH_SERVICE_DETAILS_REQUEST,\n  payload: serviceId\n});\nexport const fetchServiceDetailsSuccess = service => ({\n  type: FETCH_SERVICE_DETAILS_SUCCESS,\n  payload: service\n});\nexport const fetchServiceDetailsFailure = error => ({\n  type: FETCH_SERVICE_DETAILS_FAILURE,\n  payload: error\n});\n\n// s\n\n// // Функция для загрузки деталей услуги\n// export const fetchServiceDetails = serviceId => {\n//   return async dispatch => {\n//     dispatch(fetchServiceDetailsRequest());\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:7070/api/services/${serviceId}`\n//       );\n//       dispatch(fetchServiceDetailsSuccess(response.data));\n//     } catch (error) {\n//       dispatch(fetchServiceDetailsFailure(error));\n//     }\n//   };\n// };","map":{"version":3,"names":["axios","FETCH_SERVICES_REQUEST","FETCH_SERVICES_SUCCESS","FETCH_SERVICES_FAILURE","FETCH_SERVICE_DETAILS_REQUEST","FETCH_SERVICE_DETAILS_SUCCESS","FETCH_SERVICE_DETAILS_FAILURE","fetchServicesRequest","signal","type","payload","fetchServicesSuccess","services","fetchServicesFailure","error","fetchServiceDetailsRequest","serviceId","fetchServiceDetailsSuccess","service","fetchServiceDetailsFailure"],"sources":["/Users/kdv/repa/gpb-test-02/client/src/redux/actions.js"],"sourcesContent":["import axios from \"axios\";\n\n// Действия для загрузки списка услуг\nexport const FETCH_SERVICES_REQUEST = \"FETCH_SERVICES_REQUEST\";\nexport const FETCH_SERVICES_SUCCESS = \"FETCH_SERVICES_SUCCESS\";\nexport const FETCH_SERVICES_FAILURE = \"FETCH_SERVICES_FAILURE\";\n\n// Действие для загрузки деталей услуг\nexport const FETCH_SERVICE_DETAILS_REQUEST = \"FETCH_SERVICE_DETAILS_REQUEST\";\nexport const FETCH_SERVICE_DETAILS_SUCCESS = \"FETCH_SERVICE_DETAILS_SUCCESS\";\nexport const FETCH_SERVICE_DETAILS_FAILURE = \"FETCH_SERVICE_DETAILS_FAILURE\";\n\n// Action Creator для загрузки списка услуг\nexport const fetchServicesRequest = signal => ({\n  type: FETCH_SERVICES_REQUEST,\n  payload: signal,\n});\n\nexport const fetchServicesSuccess = services => ({\n  type: FETCH_SERVICES_SUCCESS,\n  payload: services,\n});\n\nexport const fetchServicesFailure = error => ({\n  type: FETCH_SERVICES_FAILURE,\n  payload: error,\n});\n\n// Action Creator для загрузки деталей услуги\nexport const fetchServiceDetailsRequest = serviceId => ({\n  type: FETCH_SERVICE_DETAILS_REQUEST,\n  payload: serviceId,\n});\n\nexport const fetchServiceDetailsSuccess = service => ({\n  type: FETCH_SERVICE_DETAILS_SUCCESS,\n  payload: service,\n});\n\nexport const fetchServiceDetailsFailure = error => ({\n  type: FETCH_SERVICE_DETAILS_FAILURE,\n  payload: error,\n});\n\n// s\n\n// // Функция для загрузки деталей услуги\n// export const fetchServiceDetails = serviceId => {\n//   return async dispatch => {\n//     dispatch(fetchServiceDetailsRequest());\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:7070/api/services/${serviceId}`\n//       );\n//       dispatch(fetchServiceDetailsSuccess(response.data));\n//     } catch (error) {\n//       dispatch(fetchServiceDetailsFailure(error));\n//     }\n//   };\n// };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;AAC9D,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;AAC9D,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;;AAE9D;AACA,OAAO,MAAMC,6BAA6B,GAAG,+BAA+B;AAC5E,OAAO,MAAMC,6BAA6B,GAAG,+BAA+B;AAC5E,OAAO,MAAMC,6BAA6B,GAAG,+BAA+B;;AAE5E;AACA,OAAO,MAAMC,oBAAoB,GAAGC,MAAM,KAAK;EAC7CC,IAAI,EAAER,sBAAsB;EAC5BS,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,oBAAoB,GAAGC,QAAQ,KAAK;EAC/CH,IAAI,EAAEP,sBAAsB;EAC5BQ,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,oBAAoB,GAAGC,KAAK,KAAK;EAC5CL,IAAI,EAAEN,sBAAsB;EAC5BO,OAAO,EAAEI;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,0BAA0B,GAAGC,SAAS,KAAK;EACtDP,IAAI,EAAEL,6BAA6B;EACnCM,OAAO,EAAEM;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,0BAA0B,GAAGC,OAAO,KAAK;EACpDT,IAAI,EAAEJ,6BAA6B;EACnCK,OAAO,EAAEQ;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,0BAA0B,GAAGL,KAAK,KAAK;EAClDL,IAAI,EAAEH,6BAA6B;EACnCI,OAAO,EAAEI;AACX,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}