{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport { FETCH_SERVICES_REQUEST, FETCH_SERVICES_SUCCESS, FETCH_SERVICES_FAILURE, FETCH_SERVICE_DETAILS_REQUEST, FETCH_SERVICE_DETAILS_SUCCESS, FETCH_SERVICE_DETAILS_FAILURE } from \"./actions\";\nimport { fetchServicesRequest, fetchServicesSuccess, fetchServicesFailure, fetchServiceDetailsRequest, fetchServiceDetailsSuccess, fetchServiceDetailsFailure } from \"../redux/actions\";\nimport axios from \"axios\";\nconst getServices = async signal => {\n  const response = await axios.get(\"http://localhost:7070/api/services\", {\n    signal\n  });\n  return response.data;\n};\n\n// Сага для загрузки списка услуг\nfunction* fetchServicesSaga(action) {\n  const {\n    payload\n  } = action;\n  try {\n    const response = yield call(getServices, payload);\n    yield put(fetchServicesSuccess(response));\n  } catch (error) {\n    yield put(fetchServicesFailure(error));\n  }\n}\nconst getServiceDetails = async serviceId => {\n  const response = await axios.get(`http://localhost:7070/api/services/${serviceId}`);\n  return response.data;\n};\n// Сага для загрузки деталей услуги\nfunction* fetchServiceDetailsSaga(action) {\n  const {\n    payload\n  } = action;\n  try {\n    const response = yield call(getServiceDetails, payload);\n    yield put(fetchServiceDetailsSuccess(response));\n  } catch (error) {\n    yield put(fetchServiceDetailsFailure(error));\n  }\n}\n\n// Главный сага, объединяющий все саги\nexport default function* rootSaga() {\n  yield takeLatest(FETCH_SERVICES_REQUEST, fetchServicesSaga);\n  yield takeLatest(FETCH_SERVICE_DETAILS_REQUEST, fetchServiceDetailsSaga);\n}","map":{"version":3,"names":["takeLatest","call","put","FETCH_SERVICES_REQUEST","FETCH_SERVICES_SUCCESS","FETCH_SERVICES_FAILURE","FETCH_SERVICE_DETAILS_REQUEST","FETCH_SERVICE_DETAILS_SUCCESS","FETCH_SERVICE_DETAILS_FAILURE","fetchServicesRequest","fetchServicesSuccess","fetchServicesFailure","fetchServiceDetailsRequest","fetchServiceDetailsSuccess","fetchServiceDetailsFailure","axios","getServices","signal","response","get","data","fetchServicesSaga","action","payload","error","getServiceDetails","serviceId","fetchServiceDetailsSaga","rootSaga"],"sources":["/Users/kdv/repa/gpb-test-02/client/src/redux/sagas.js"],"sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\nimport {\n  FETCH_SERVICES_REQUEST,\n  FETCH_SERVICES_SUCCESS,\n  FETCH_SERVICES_FAILURE,\n  FETCH_SERVICE_DETAILS_REQUEST,\n  FETCH_SERVICE_DETAILS_SUCCESS,\n  FETCH_SERVICE_DETAILS_FAILURE,\n} from \"./actions\";\n\nimport {\n  fetchServicesRequest,\n  fetchServicesSuccess,\n  fetchServicesFailure,\n  fetchServiceDetailsRequest,\n  fetchServiceDetailsSuccess,\n  fetchServiceDetailsFailure,\n} from \"../redux/actions\";\nimport axios from \"axios\";\n\n\nconst getServices = async signal => {\n  const response = await axios.get(\"http://localhost:7070/api/services\", {\n    signal,\n  });\n\n  return response.data;\n};\n\n// Сага для загрузки списка услуг\nfunction* fetchServicesSaga(action) {\n  const { payload } = action;\n  try {\n    const response = yield call(getServices, payload);\n\n    yield put(fetchServicesSuccess(response));\n  } catch (error) {\n    yield put(fetchServicesFailure(error));\n  }\n}\n\nconst getServiceDetails = async serviceId => {\n  const response = await axios.get(\n    `http://localhost:7070/api/services/${serviceId}`\n  );\n\n  return response.data;\n};\n// Сага для загрузки деталей услуги\nfunction* fetchServiceDetailsSaga(action) {\n  const { payload } = action;\n\n  try {\n    const response = yield call(getServiceDetails, payload);\n    yield put(fetchServiceDetailsSuccess(response));\n  } catch (error) {\n    yield put(fetchServiceDetailsFailure(error));\n  }\n}\n\n// Главный сага, объединяющий все саги\nexport default function* rootSaga() {\n  yield takeLatest(FETCH_SERVICES_REQUEST, fetchServicesSaga);\n  yield takeLatest(FETCH_SERVICE_DETAILS_REQUEST, fetchServiceDetailsSaga);\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC1D,SACEC,sBAAsB,EACtBC,sBAAsB,EACtBC,sBAAsB,EACtBC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,6BAA6B,QACxB,WAAW;AAElB,SACEC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,0BAA0B,QACrB,kBAAkB;AACzB,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,WAAW,GAAG,MAAMC,MAAM,IAAI;EAClC,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,oCAAoC,EAAE;IACrEF;EACF,CAAC,CAAC;EAEF,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,UAAUC,iBAAiBA,CAACC,MAAM,EAAE;EAClC,MAAM;IAAEC;EAAQ,CAAC,GAAGD,MAAM;EAC1B,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMjB,IAAI,CAACe,WAAW,EAAEO,OAAO,CAAC;IAEjD,MAAMrB,GAAG,CAACQ,oBAAoB,CAACQ,QAAQ,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,MAAMtB,GAAG,CAACS,oBAAoB,CAACa,KAAK,CAAC,CAAC;EACxC;AACF;AAEA,MAAMC,iBAAiB,GAAG,MAAMC,SAAS,IAAI;EAC3C,MAAMR,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC7B,sCAAqCO,SAAU,EAClD,CAAC;EAED,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;AACD;AACA,UAAUO,uBAAuBA,CAACL,MAAM,EAAE;EACxC,MAAM;IAAEC;EAAQ,CAAC,GAAGD,MAAM;EAE1B,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMjB,IAAI,CAACwB,iBAAiB,EAAEF,OAAO,CAAC;IACvD,MAAMrB,GAAG,CAACW,0BAA0B,CAACK,QAAQ,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,MAAMtB,GAAG,CAACY,0BAA0B,CAACU,KAAK,CAAC,CAAC;EAC9C;AACF;;AAEA;AACA,eAAe,UAAUI,QAAQA,CAAA,EAAG;EAClC,MAAM5B,UAAU,CAACG,sBAAsB,EAAEkB,iBAAiB,CAAC;EAC3D,MAAMrB,UAAU,CAACM,6BAA6B,EAAEqB,uBAAuB,CAAC;AAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}